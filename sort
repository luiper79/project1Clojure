;;namespace declaration
(ns qsort.core
  (:gen-class))

;;input output declaration
(require '[clojure.java.io :as io])

;; function declaration reads from any file
;; type on terminal (reader-lines "filename.txt") and print lines
(defn reader-lines [filename]
  (with-open [rdr (io/reader filename)]
         (doseq [line (line-seq rdr)]
            (println line))))

;; function quicksort it takes a list or vector and sorts it
;; type on terminal (quick-sort [any-list-or-vector]) and prints sort list
(defn quick-sort [list]
     (lazy-seq
      (loop [[part & parts] list]            ;; Pull apart list - note: list will be a list of lists.
        (if-let [[pivot & xs] (seq part)]    ;; This blows up unless list was a list of lists.
          (let [smaller? #(< % pivot)]       ;; define pivot comparison function.
            (recur (list*                    
                    (filter smaller? xs)     ;; list all < pivot
                    pivot                    ;; list pivot itself
                    (remove smaller? xs)     ;; list all > pivot
                    parts)))                 ;; concat parts
          (when-let [[x & parts] parts]      ;; sort rest if more parts
            (cons x (quick-sort parts)))))))

